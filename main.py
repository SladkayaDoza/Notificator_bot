import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from script_runner import run_script, stop_script

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
SCRIPTS_DIR = "scripts"
LOGS_DIR = "logs"
os.makedirs(SCRIPTS_DIR, exist_ok=True)
os.makedirs(LOGS_DIR, exist_ok=True)

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
class TaskManager:
    def __init__(self):
        self.tasks = {}
        self._next_task_id = 1

    def add_task(self, script_path, process):
        task_id = self._next_task_id
        self.tasks[task_id] = {
            'script_path': script_path,
            'process': process,
            'start_time': asyncio.get_running_loop().time()
        }
        self._next_task_id += 1
        return task_id

    def remove_task(self, task_id):
        return self.tasks.pop(task_id, None)

    def get_tasks(self):
        return self.tasks

    def get_task(self, task_id):
        return self.tasks.get(task_id)

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
task_manager = TaskManager()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Python-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è üêç")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
@dp.message(lambda m: m.document)
async def handle_script(message: Message):
    document = message.document
    if not document.file_name.endswith(".py"):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
    script_path = os.path.join(SCRIPTS_DIR, document.file_name)
    await bot.download(document, destination=script_path)
    await message.reply("–°–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–µ–Ω! –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    process = await run_script(task_manager._next_task_id, script_path)
    task_id = task_manager.add_task(script_path, process)
    
    asyncio.create_task(execute_script(message, script_path, document.file_name, task_id))

async def execute_script(message: Message, script_path: str, file_name: str, task_id: int):
    output, status = await run_script(task_id, script_path)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    task_manager.remove_task(task_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    log_path = os.path.join(LOGS_DIR, f"{file_name}.log")
    with open(log_path, "w") as log_file:
        log_file.write(output)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—ã–≤–æ–¥
    response = f"**–°—Ç–∞—Ç—É—Å**: {status}\n`\n{output}\n`"
    await message.reply(response, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /tasks ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
@dp.message(Command("tasks"))
async def list_tasks(message: Message):
    tasks = task_manager.get_tasks()
    
    if not tasks:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á üí§")
        return
    
    current_time = asyncio.get_running_loop().time()
    tasks_list = []
    
    for task_id, task_info in tasks.items():
        runtime = current_time - task_info['start_time']
        task_description = (
            f"ID: {task_id} ‚Äì {os.path.basename(task_info['script_path'])} "
            f"(–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {runtime:.2f} —Å–µ–∫)"
        )
        tasks_list.append(task_description)
    
    tasks_text = "\n".join(tasks_list)
    await message.reply(f"**–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n{tasks_text}", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /stop <task_id> ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
@dp.message(Command("stop"))
async def stop_task(message: Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stop <task_id>")
        return
    
    task_id = int(args[1])
    task = task_manager.get_task(task_id)
    
    if task:
        stop_script(task['process'])  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        task_manager.remove_task(task_id)
        await message.reply(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚õî")
    else:
        await message.reply("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üßê")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())